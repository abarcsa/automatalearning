/**
 * generated by Xtext 2.15.0
 */
package hu.bme.mit.mealymodel.xtext.formatting2;

import com.google.inject.Inject;
import hu.bme.mit.mealymodel.Alphabet;
import hu.bme.mit.mealymodel.MealyMachine;
import hu.bme.mit.mealymodel.State;
import hu.bme.mit.mealymodel.Transition;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class MealymachineDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private /* MealymachineDslGrammarAccess */Object _mealymachineDslGrammarAccess;
  
  protected void _format(final MealyMachine mealeyMachine, @Extension final IFormattableDocument document) {
    document.<State>format(mealeyMachine.getInitialState());
    EList<State> _states = mealeyMachine.getStates();
    for (final State state : _states) {
      document.<State>format(state);
    }
    document.<Alphabet>format(mealeyMachine.getInputAlphabet());
    document.<Alphabet>format(mealeyMachine.getOutputAlphabet());
    EList<Transition> _transitions = mealeyMachine.getTransitions();
    for (final Transition transition : _transitions) {
      document.<Transition>format(transition);
    }
  }
  
  public void format(final Object mealeyMachine, final IFormattableDocument document) {
    if (mealeyMachine instanceof XtextResource) {
      _format((XtextResource)mealeyMachine, document);
      return;
    } else if (mealeyMachine instanceof MealyMachine) {
      _format((MealyMachine)mealeyMachine, document);
      return;
    } else if (mealeyMachine instanceof EObject) {
      _format((EObject)mealeyMachine, document);
      return;
    } else if (mealeyMachine == null) {
      _format((Void)null, document);
      return;
    } else if (mealeyMachine != null) {
      _format(mealeyMachine, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(mealeyMachine, document).toString());
    }
  }
}
