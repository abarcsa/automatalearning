/*
 * generated by Xtext 2.23.0
 */
grammar InternalLtl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package hu.bme.mit.ltl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package hu.bme.mit.ltl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import hu.bme.mit.ltl.services.LtlGrammarAccess;

}
@parser::members {
	private LtlGrammarAccess grammarAccess;

	public void setGrammarAccess(LtlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleLTLExpression
entryRuleLTLExpression
:
{ before(grammarAccess.getLTLExpressionRule()); }
	 ruleLTLExpression
{ after(grammarAccess.getLTLExpressionRule()); } 
	 EOF 
;

// Rule LTLExpression
ruleLTLExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLTLExpressionAccess().getArrowExpressionParserRuleCall()); }
		ruleArrowExpression
		{ after(grammarAccess.getLTLExpressionAccess().getArrowExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArrowExpression
entryRuleArrowExpression
:
{ before(grammarAccess.getArrowExpressionRule()); }
	 ruleArrowExpression
{ after(grammarAccess.getArrowExpressionRule()); } 
	 EOF 
;

// Rule ArrowExpression
ruleArrowExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArrowExpressionAccess().getGroup()); }
		(rule__ArrowExpression__Group__0)
		{ after(grammarAccess.getArrowExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpression
entryRuleOrExpression
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
		(rule__OrExpression__Group__0)
		{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUntilExpression
entryRuleUntilExpression
:
{ before(grammarAccess.getUntilExpressionRule()); }
	 ruleUntilExpression
{ after(grammarAccess.getUntilExpressionRule()); } 
	 EOF 
;

// Rule UntilExpression
ruleUntilExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUntilExpressionAccess().getGroup()); }
		(rule__UntilExpression__Group__0)
		{ after(grammarAccess.getUntilExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFutureGloballyExpression
entryRuleFutureGloballyExpression
:
{ before(grammarAccess.getFutureGloballyExpressionRule()); }
	 ruleFutureGloballyExpression
{ after(grammarAccess.getFutureGloballyExpressionRule()); } 
	 EOF 
;

// Rule FutureGloballyExpression
ruleFutureGloballyExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFutureGloballyExpressionAccess().getAlternatives()); }
		(rule__FutureGloballyExpression__Alternatives)
		{ after(grammarAccess.getFutureGloballyExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNextExpression
entryRuleNextExpression
:
{ before(grammarAccess.getNextExpressionRule()); }
	 ruleNextExpression
{ after(grammarAccess.getNextExpressionRule()); } 
	 EOF 
;

// Rule NextExpression
ruleNextExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNextExpressionAccess().getAlternatives()); }
		(rule__NextExpression__Alternatives)
		{ after(grammarAccess.getNextExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression
:
{ before(grammarAccess.getLiteralExpressionRule()); }
	 ruleLiteralExpression
{ after(grammarAccess.getLiteralExpressionRule()); } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
		(rule__LiteralExpression__Alternatives)
		{ after(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFalseExpression
entryRuleFalseExpression
:
{ before(grammarAccess.getFalseExpressionRule()); }
	 ruleFalseExpression
{ after(grammarAccess.getFalseExpressionRule()); } 
	 EOF 
;

// Rule FalseExpression
ruleFalseExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFalseExpressionAccess().getGroup()); }
		(rule__FalseExpression__Group__0)
		{ after(grammarAccess.getFalseExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrueExpression
entryRuleTrueExpression
:
{ before(grammarAccess.getTrueExpressionRule()); }
	 ruleTrueExpression
{ after(grammarAccess.getTrueExpressionRule()); } 
	 EOF 
;

// Rule TrueExpression
ruleTrueExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrueExpressionAccess().getGroup()); }
		(rule__TrueExpression__Group__0)
		{ after(grammarAccess.getTrueExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtomicProposition
entryRuleAtomicProposition
:
{ before(grammarAccess.getAtomicPropositionRule()); }
	 ruleAtomicProposition
{ after(grammarAccess.getAtomicPropositionRule()); } 
	 EOF 
;

// Rule AtomicProposition
ruleAtomicProposition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomicPropositionAccess().getGroup()); }
		(rule__AtomicProposition__Group__0)
		{ after(grammarAccess.getAtomicPropositionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrowExpression__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrowExpressionAccess().getGroup_1_0()); }
		(rule__ArrowExpression__Group_1_0__0)
		{ after(grammarAccess.getArrowExpressionAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getArrowExpressionAccess().getGroup_1_1()); }
		(rule__ArrowExpression__Group_1_1__0)
		{ after(grammarAccess.getArrowExpressionAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FutureGloballyExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFutureGloballyExpressionAccess().getGroup_0()); }
		(rule__FutureGloballyExpression__Group_0__0)
		{ after(grammarAccess.getFutureGloballyExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFutureGloballyExpressionAccess().getGroup_1()); }
		(rule__FutureGloballyExpression__Group_1__0)
		{ after(grammarAccess.getFutureGloballyExpressionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getFutureGloballyExpressionAccess().getNextExpressionParserRuleCall_2()); }
		ruleNextExpression
		{ after(grammarAccess.getFutureGloballyExpressionAccess().getNextExpressionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NextExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNextExpressionAccess().getGroup_0()); }
		(rule__NextExpression__Group_0__0)
		{ after(grammarAccess.getNextExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNextExpressionAccess().getPrimaryExpressionParserRuleCall_1()); }
		rulePrimaryExpression
		{ after(grammarAccess.getNextExpressionAccess().getPrimaryExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
		(rule__PrimaryExpression__Group_0__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
		(rule__PrimaryExpression__Group_1__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralExpressionParserRuleCall_2()); }
		ruleLiteralExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralExpressionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getAtomicPropositionParserRuleCall_0()); }
		ruleAtomicProposition
		{ after(grammarAccess.getLiteralExpressionAccess().getAtomicPropositionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getTrueExpressionParserRuleCall_1()); }
		ruleTrueExpression
		{ after(grammarAccess.getLiteralExpressionAccess().getTrueExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getFalseExpressionParserRuleCall_2()); }
		ruleFalseExpression
		{ after(grammarAccess.getLiteralExpressionAccess().getFalseExpressionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrowExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrowExpression__Group__0__Impl
	rule__ArrowExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrowExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrowExpressionAccess().getOrExpressionParserRuleCall_0()); }
	ruleOrExpression
	{ after(grammarAccess.getArrowExpressionAccess().getOrExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrowExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrowExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrowExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrowExpressionAccess().getAlternatives_1()); }
	(rule__ArrowExpression__Alternatives_1)?
	{ after(grammarAccess.getArrowExpressionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrowExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrowExpression__Group_1_0__0__Impl
	rule__ArrowExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrowExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrowExpressionAccess().getImplyExpressionLeftOperandAction_1_0_0()); }
	()
	{ after(grammarAccess.getArrowExpressionAccess().getImplyExpressionLeftOperandAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrowExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrowExpression__Group_1_0__1__Impl
	rule__ArrowExpression__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrowExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrowExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_0_1()); }
	'->'
	{ after(grammarAccess.getArrowExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrowExpression__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrowExpression__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrowExpression__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrowExpressionAccess().getRightOperandAssignment_1_0_2()); }
	(rule__ArrowExpression__RightOperandAssignment_1_0_2)
	{ after(grammarAccess.getArrowExpressionAccess().getRightOperandAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrowExpression__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrowExpression__Group_1_1__0__Impl
	rule__ArrowExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrowExpression__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrowExpressionAccess().getEquivalenceExpressionLeftOperandAction_1_1_0()); }
	()
	{ after(grammarAccess.getArrowExpressionAccess().getEquivalenceExpressionLeftOperandAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrowExpression__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrowExpression__Group_1_1__1__Impl
	rule__ArrowExpression__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrowExpression__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrowExpressionAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_1()); }
	'<->'
	{ after(grammarAccess.getArrowExpressionAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrowExpression__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrowExpression__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrowExpression__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrowExpressionAccess().getRightOperandAssignment_1_1_2()); }
	(rule__ArrowExpression__RightOperandAssignment_1_1_2)
	{ after(grammarAccess.getArrowExpressionAccess().getRightOperandAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
	{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
	(rule__OrExpression__Group_1__0)*
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOrExpressionLeftOperandAction_1_0()); }
	()
	{ after(grammarAccess.getOrExpressionAccess().getOrExpressionLeftOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getVerticalLineKeyword_1_1()); }
	'|'
	{ after(grammarAccess.getOrExpressionAccess().getVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getRightOperandAssignment_1_2()); }
	(rule__OrExpression__RightOperandAssignment_1_2)
	{ after(grammarAccess.getOrExpressionAccess().getRightOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getUntilExpressionParserRuleCall_0()); }
	ruleUntilExpression
	{ after(grammarAccess.getAndExpressionAccess().getUntilExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftOperandAction_1_0()); }
	()
	{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAmpersandKeyword_1_1()); }
	'&'
	{ after(grammarAccess.getAndExpressionAccess().getAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getRightOperandAssignment_1_2()); }
	(rule__AndExpression__RightOperandAssignment_1_2)
	{ after(grammarAccess.getAndExpressionAccess().getRightOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UntilExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UntilExpression__Group__0__Impl
	rule__UntilExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UntilExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUntilExpressionAccess().getFutureGloballyExpressionParserRuleCall_0()); }
	ruleFutureGloballyExpression
	{ after(grammarAccess.getUntilExpressionAccess().getFutureGloballyExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UntilExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UntilExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UntilExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUntilExpressionAccess().getGroup_1()); }
	(rule__UntilExpression__Group_1__0)?
	{ after(grammarAccess.getUntilExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UntilExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UntilExpression__Group_1__0__Impl
	rule__UntilExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UntilExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUntilExpressionAccess().getUntilExpressionLeftOperandAction_1_0()); }
	()
	{ after(grammarAccess.getUntilExpressionAccess().getUntilExpressionLeftOperandAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UntilExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UntilExpression__Group_1__1__Impl
	rule__UntilExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UntilExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUntilExpressionAccess().getUKeyword_1_1()); }
	'U'
	{ after(grammarAccess.getUntilExpressionAccess().getUKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UntilExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UntilExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UntilExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUntilExpressionAccess().getRightOperandAssignment_1_2()); }
	(rule__UntilExpression__RightOperandAssignment_1_2)
	{ after(grammarAccess.getUntilExpressionAccess().getRightOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FutureGloballyExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FutureGloballyExpression__Group_0__0__Impl
	rule__FutureGloballyExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FutureGloballyExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFutureGloballyExpressionAccess().getFKeyword_0_0()); }
	'F'
	{ after(grammarAccess.getFutureGloballyExpressionAccess().getFKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FutureGloballyExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FutureGloballyExpression__Group_0__1__Impl
	rule__FutureGloballyExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FutureGloballyExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFutureGloballyExpressionAccess().getFutureExpressionAction_0_1()); }
	()
	{ after(grammarAccess.getFutureGloballyExpressionAccess().getFutureExpressionAction_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FutureGloballyExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FutureGloballyExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FutureGloballyExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFutureGloballyExpressionAccess().getOperandAssignment_0_2()); }
	(rule__FutureGloballyExpression__OperandAssignment_0_2)
	{ after(grammarAccess.getFutureGloballyExpressionAccess().getOperandAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FutureGloballyExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FutureGloballyExpression__Group_1__0__Impl
	rule__FutureGloballyExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FutureGloballyExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFutureGloballyExpressionAccess().getGKeyword_1_0()); }
	'G'
	{ after(grammarAccess.getFutureGloballyExpressionAccess().getGKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FutureGloballyExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FutureGloballyExpression__Group_1__1__Impl
	rule__FutureGloballyExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FutureGloballyExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFutureGloballyExpressionAccess().getGloballyExpressionAction_1_1()); }
	()
	{ after(grammarAccess.getFutureGloballyExpressionAccess().getGloballyExpressionAction_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FutureGloballyExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FutureGloballyExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FutureGloballyExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFutureGloballyExpressionAccess().getOperandAssignment_1_2()); }
	(rule__FutureGloballyExpression__OperandAssignment_1_2)
	{ after(grammarAccess.getFutureGloballyExpressionAccess().getOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NextExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NextExpression__Group_0__0__Impl
	rule__NextExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NextExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNextExpressionAccess().getXKeyword_0_0()); }
	'X'
	{ after(grammarAccess.getNextExpressionAccess().getXKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NextExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NextExpression__Group_0__1__Impl
	rule__NextExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NextExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNextExpressionAccess().getNextExpressionAction_0_1()); }
	()
	{ after(grammarAccess.getNextExpressionAccess().getNextExpressionAction_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NextExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NextExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NextExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNextExpressionAccess().getOperandAssignment_0_2()); }
	(rule__NextExpression__OperandAssignment_0_2)
	{ after(grammarAccess.getNextExpressionAccess().getOperandAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__0__Impl
	rule__PrimaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__1__Impl
	rule__PrimaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getLTLExpressionParserRuleCall_0_1()); }
	ruleLTLExpression
	{ after(grammarAccess.getPrimaryExpressionAccess().getLTLExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1__0__Impl
	rule__PrimaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getNotExpressionAction_1_0()); }
	()
	{ after(grammarAccess.getPrimaryExpressionAccess().getNotExpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1__1__Impl
	rule__PrimaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getExclamationMarkKeyword_1_1()); }
	'!'
	{ after(grammarAccess.getPrimaryExpressionAccess().getExclamationMarkKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getOperandAssignment_1_2()); }
	(rule__PrimaryExpression__OperandAssignment_1_2)
	{ after(grammarAccess.getPrimaryExpressionAccess().getOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FalseExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FalseExpression__Group__0__Impl
	rule__FalseExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFalseExpressionAccess().getFalseExpressionAction_0()); }
	()
	{ after(grammarAccess.getFalseExpressionAccess().getFalseExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FalseExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFalseExpressionAccess().getFalseKeyword_1()); }
	'false'
	{ after(grammarAccess.getFalseExpressionAccess().getFalseKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TrueExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrueExpression__Group__0__Impl
	rule__TrueExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrueExpressionAccess().getTrueExpressionAction_0()); }
	()
	{ after(grammarAccess.getTrueExpressionAccess().getTrueExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrueExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrueExpressionAccess().getTrueKeyword_1()); }
	'true'
	{ after(grammarAccess.getTrueExpressionAccess().getTrueKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicProposition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicProposition__Group__0__Impl
	rule__AtomicProposition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicProposition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicPropositionAccess().getAtomicPropositionAction_0()); }
	()
	{ after(grammarAccess.getAtomicPropositionAccess().getAtomicPropositionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicProposition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicProposition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicProposition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicPropositionAccess().getPropositionAssignment_1()); }
	(rule__AtomicProposition__PropositionAssignment_1)
	{ after(grammarAccess.getAtomicPropositionAccess().getPropositionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrowExpression__RightOperandAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrowExpressionAccess().getRightOperandArrowExpressionParserRuleCall_1_0_2_0()); }
		ruleArrowExpression
		{ after(grammarAccess.getArrowExpressionAccess().getRightOperandArrowExpressionParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrowExpression__RightOperandAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrowExpressionAccess().getRightOperandArrowExpressionParserRuleCall_1_1_2_0()); }
		ruleArrowExpression
		{ after(grammarAccess.getArrowExpressionAccess().getRightOperandArrowExpressionParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightOperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getRightOperandAndExpressionParserRuleCall_1_2_0()); }
		ruleAndExpression
		{ after(grammarAccess.getOrExpressionAccess().getRightOperandAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightOperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getRightOperandUntilExpressionParserRuleCall_1_2_0()); }
		ruleUntilExpression
		{ after(grammarAccess.getAndExpressionAccess().getRightOperandUntilExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UntilExpression__RightOperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUntilExpressionAccess().getRightOperandUntilExpressionParserRuleCall_1_2_0()); }
		ruleUntilExpression
		{ after(grammarAccess.getUntilExpressionAccess().getRightOperandUntilExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FutureGloballyExpression__OperandAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFutureGloballyExpressionAccess().getOperandNextExpressionParserRuleCall_0_2_0()); }
		ruleNextExpression
		{ after(grammarAccess.getFutureGloballyExpressionAccess().getOperandNextExpressionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FutureGloballyExpression__OperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFutureGloballyExpressionAccess().getOperandNextExpressionParserRuleCall_1_2_0()); }
		ruleNextExpression
		{ after(grammarAccess.getFutureGloballyExpressionAccess().getOperandNextExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NextExpression__OperandAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNextExpressionAccess().getOperandPrimaryExpressionParserRuleCall_0_2_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getNextExpressionAccess().getOperandPrimaryExpressionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__OperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getOperandPrimaryExpressionParserRuleCall_1_2_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getOperandPrimaryExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicProposition__PropositionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicPropositionAccess().getPropositionEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getAtomicPropositionAccess().getPropositionEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
