/*
 * generated by Xtext 2.20.0
 */
package hu.bme.mit.mealymodel.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MealyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MealyMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mealymodel.MealyDsl.MealyMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMealyMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInitialStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitialStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitialStateStateParserRuleCall_3_0 = (RuleCall)cInitialStateAssignment_3.eContents().get(0);
		private final Keyword cStatesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatesStateParserRuleCall_6_0 = (RuleCall)cStatesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cStatesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_7_1_0 = (RuleCall)cStatesAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cInputAlphabetKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cInputAlphabetAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cInputAlphabetAlphabetParserRuleCall_10_0 = (RuleCall)cInputAlphabetAssignment_10.eContents().get(0);
		private final Keyword cOutputAlphabetKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cOutputAlphabetAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cOutputAlphabetAlphabetParserRuleCall_12_0 = (RuleCall)cOutputAlphabetAssignment_12.eContents().get(0);
		private final Keyword cTransitionsKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cLeftCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cTransitionsAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cTransitionsTransitionParserRuleCall_15_0 = (RuleCall)cTransitionsAssignment_15.eContents().get(0);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cCommaKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Assignment cTransitionsAssignment_16_1 = (Assignment)cGroup_16.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_16_1_0 = (RuleCall)cTransitionsAssignment_16_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cRightCurlyBracketKeyword_18 = (Keyword)cGroup.eContents().get(18);
		
		//MealyMachine:
		//	'MealyMachine'
		//	'{'
		//	'initialState' initialState=State
		//	'states' '{' states+=State ("," states+=State)* '}'
		//	'inputAlphabet' inputAlphabet=Alphabet
		//	'outputAlphabet' outputAlphabet=Alphabet
		//	'transitions' '{' transitions+=Transition ("," transitions+=Transition)* '}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'MealyMachine' '{' 'initialState' initialState=State 'states' '{' states+=State ("," states+=State)* '}' 'inputAlphabet'
		//inputAlphabet=Alphabet 'outputAlphabet' outputAlphabet=Alphabet 'transitions' '{' transitions+=Transition (","
		//transitions+=Transition)* '}' '}'
		public Group getGroup() { return cGroup; }
		
		//'MealyMachine'
		public Keyword getMealyMachineKeyword_0() { return cMealyMachineKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'initialState'
		public Keyword getInitialStateKeyword_2() { return cInitialStateKeyword_2; }
		
		//initialState=State
		public Assignment getInitialStateAssignment_3() { return cInitialStateAssignment_3; }
		
		//State
		public RuleCall getInitialStateStateParserRuleCall_3_0() { return cInitialStateStateParserRuleCall_3_0; }
		
		//'states'
		public Keyword getStatesKeyword_4() { return cStatesKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//states+=State
		public Assignment getStatesAssignment_6() { return cStatesAssignment_6; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_6_0() { return cStatesStateParserRuleCall_6_0; }
		
		//("," states+=State)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//states+=State
		public Assignment getStatesAssignment_7_1() { return cStatesAssignment_7_1; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_7_1_0() { return cStatesStateParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//'inputAlphabet'
		public Keyword getInputAlphabetKeyword_9() { return cInputAlphabetKeyword_9; }
		
		//inputAlphabet=Alphabet
		public Assignment getInputAlphabetAssignment_10() { return cInputAlphabetAssignment_10; }
		
		//Alphabet
		public RuleCall getInputAlphabetAlphabetParserRuleCall_10_0() { return cInputAlphabetAlphabetParserRuleCall_10_0; }
		
		//'outputAlphabet'
		public Keyword getOutputAlphabetKeyword_11() { return cOutputAlphabetKeyword_11; }
		
		//outputAlphabet=Alphabet
		public Assignment getOutputAlphabetAssignment_12() { return cOutputAlphabetAssignment_12; }
		
		//Alphabet
		public RuleCall getOutputAlphabetAlphabetParserRuleCall_12_0() { return cOutputAlphabetAlphabetParserRuleCall_12_0; }
		
		//'transitions'
		public Keyword getTransitionsKeyword_13() { return cTransitionsKeyword_13; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_14() { return cLeftCurlyBracketKeyword_14; }
		
		//transitions+=Transition
		public Assignment getTransitionsAssignment_15() { return cTransitionsAssignment_15; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_15_0() { return cTransitionsTransitionParserRuleCall_15_0; }
		
		//("," transitions+=Transition)*
		public Group getGroup_16() { return cGroup_16; }
		
		//","
		public Keyword getCommaKeyword_16_0() { return cCommaKeyword_16_0; }
		
		//transitions+=Transition
		public Assignment getTransitionsAssignment_16_1() { return cTransitionsAssignment_16_1; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_16_1_0() { return cTransitionsTransitionParserRuleCall_16_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_18() { return cRightCurlyBracketKeyword_18; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mealymodel.MealyDsl.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//State:
		//	{State}
		//	'State'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{State} 'State' name=EString
		public Group getGroup() { return cGroup; }
		
		//{State}
		public Action getStateAction_0() { return cStateAction_0; }
		
		//'State'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class AlphabetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mealymodel.MealyDsl.Alphabet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlphabetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCharactersKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCharactersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCharactersEStringParserRuleCall_4_0 = (RuleCall)cCharactersAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cCharactersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cCharactersEStringParserRuleCall_5_1_0 = (RuleCall)cCharactersAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Alphabet:
		//	'Alphabet'
		//	'{'
		//	'characters' '{' characters+=EString ("," characters+=EString)* '}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Alphabet' '{' 'characters' '{' characters+=EString ("," characters+=EString)* '}' '}'
		public Group getGroup() { return cGroup; }
		
		//'Alphabet'
		public Keyword getAlphabetKeyword_0() { return cAlphabetKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'characters'
		public Keyword getCharactersKeyword_2() { return cCharactersKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//characters+=EString
		public Assignment getCharactersAssignment_4() { return cCharactersAssignment_4; }
		
		//EString
		public RuleCall getCharactersEStringParserRuleCall_4_0() { return cCharactersEStringParserRuleCall_4_0; }
		
		//("," characters+=EString)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//characters+=EString
		public Assignment getCharactersAssignment_5_1() { return cCharactersAssignment_5_1; }
		
		//EString
		public RuleCall getCharactersEStringParserRuleCall_5_1_0() { return cCharactersEStringParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mealymodel.MealyDsl.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInputKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputEStringParserRuleCall_3_0 = (RuleCall)cInputAssignment_3.eContents().get(0);
		private final Keyword cOutputKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOutputAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutputEStringParserRuleCall_5_0 = (RuleCall)cOutputAssignment_5.eContents().get(0);
		private final Keyword cSourceStateKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSourceStateAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cSourceStateStateCrossReference_7_0 = (CrossReference)cSourceStateAssignment_7.eContents().get(0);
		private final RuleCall cSourceStateStateEStringParserRuleCall_7_0_1 = (RuleCall)cSourceStateStateCrossReference_7_0.eContents().get(1);
		private final Keyword cTargetStateKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTargetStateAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cTargetStateStateCrossReference_9_0 = (CrossReference)cTargetStateAssignment_9.eContents().get(0);
		private final RuleCall cTargetStateStateEStringParserRuleCall_9_0_1 = (RuleCall)cTargetStateStateCrossReference_9_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Transition:
		//	'Transition'
		//	'{'
		//	'input' input=EString
		//	'output' output=EString
		//	'sourceState' sourceState=[State|EString]
		//	'targetState' targetState=[State|EString]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Transition' '{' 'input' input=EString 'output' output=EString 'sourceState' sourceState=[State|EString] 'targetState'
		//targetState=[State|EString] '}'
		public Group getGroup() { return cGroup; }
		
		//'Transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'input'
		public Keyword getInputKeyword_2() { return cInputKeyword_2; }
		
		//input=EString
		public Assignment getInputAssignment_3() { return cInputAssignment_3; }
		
		//EString
		public RuleCall getInputEStringParserRuleCall_3_0() { return cInputEStringParserRuleCall_3_0; }
		
		//'output'
		public Keyword getOutputKeyword_4() { return cOutputKeyword_4; }
		
		//output=EString
		public Assignment getOutputAssignment_5() { return cOutputAssignment_5; }
		
		//EString
		public RuleCall getOutputEStringParserRuleCall_5_0() { return cOutputEStringParserRuleCall_5_0; }
		
		//'sourceState'
		public Keyword getSourceStateKeyword_6() { return cSourceStateKeyword_6; }
		
		//sourceState=[State|EString]
		public Assignment getSourceStateAssignment_7() { return cSourceStateAssignment_7; }
		
		//[State|EString]
		public CrossReference getSourceStateStateCrossReference_7_0() { return cSourceStateStateCrossReference_7_0; }
		
		//EString
		public RuleCall getSourceStateStateEStringParserRuleCall_7_0_1() { return cSourceStateStateEStringParserRuleCall_7_0_1; }
		
		//'targetState'
		public Keyword getTargetStateKeyword_8() { return cTargetStateKeyword_8; }
		
		//targetState=[State|EString]
		public Assignment getTargetStateAssignment_9() { return cTargetStateAssignment_9; }
		
		//[State|EString]
		public CrossReference getTargetStateStateCrossReference_9_0() { return cTargetStateStateCrossReference_9_0; }
		
		//EString
		public RuleCall getTargetStateStateEStringParserRuleCall_9_0_1() { return cTargetStateStateEStringParserRuleCall_9_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.mealymodel.MealyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final MealyMachineElements pMealyMachine;
	private final StateElements pState;
	private final AlphabetElements pAlphabet;
	private final TransitionElements pTransition;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MealyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMealyMachine = new MealyMachineElements();
		this.pState = new StateElements();
		this.pAlphabet = new AlphabetElements();
		this.pTransition = new TransitionElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.mealymodel.MealyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MealyMachine:
	//	'MealyMachine'
	//	'{'
	//	'initialState' initialState=State
	//	'states' '{' states+=State ("," states+=State)* '}'
	//	'inputAlphabet' inputAlphabet=Alphabet
	//	'outputAlphabet' outputAlphabet=Alphabet
	//	'transitions' '{' transitions+=Transition ("," transitions+=Transition)* '}'
	//	'}';
	public MealyMachineElements getMealyMachineAccess() {
		return pMealyMachine;
	}
	
	public ParserRule getMealyMachineRule() {
		return getMealyMachineAccess().getRule();
	}
	
	//State:
	//	{State}
	//	'State'
	//	name=EString;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Alphabet:
	//	'Alphabet'
	//	'{'
	//	'characters' '{' characters+=EString ("," characters+=EString)* '}'
	//	'}';
	public AlphabetElements getAlphabetAccess() {
		return pAlphabet;
	}
	
	public ParserRule getAlphabetRule() {
		return getAlphabetAccess().getRule();
	}
	
	//Transition:
	//	'Transition'
	//	'{'
	//	'input' input=EString
	//	'output' output=EString
	//	'sourceState' sourceState=[State|EString]
	//	'targetState' targetState=[State|EString]
	//	'}';
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
